README
BASED ON: https://github.com/justinmeiners/lc3-vm

=== What is this? ===
This is a virtual machine tutorial * this is still in progress *

The assembly language that it uses is: LC-3

THIS ONLY WORKS FOR *UNIX LIKE SYSTEMS -- I.E., LINUX, FREEBSD, AND MACOS.

=== Program is in C ===
* compile with either, CLANG or GCC *

git clone and go to the directory:
git clone git@github.com:arcelioeperez/virtmachine.git && cd virtmachine

first make `run.sh` an executable with `chmod +x`:
chmod +x run.sh

compile and run with `run.sh`: 
./run.sh

alternatively, compile with `clang` or `gcc`:
gcc main.c
#or 
clang main.c

run:
./a.out

Use `./clear.sh` to remove the `.out` file
-- careful, clear.sh deletes all of the .out files
-- if you compile with `-o` flag, you have to change clear.sh if you want 
to remove the executable file

Compiling with the `-o` flag:
gcc main.c -o filename
clang main.c -o filename

=== TEXT EDITOR ===
VI or VIM

=== OS ===
This code was tested on MacOS and Linux (Ubuntu & Manjaro) 

However given that the *nix like systems are somewhat similar you could
also assume that this code runs in FreeBSD as well.

=== REFERENCE === 
tutorial: https://justinmeiners.github.io/lc3-vm/
binary negative numbers: https://www.electronics-tutorials.ws/binary/signed-binary-numbers.html#:~:text=In%20two's%20complement%20form%2C%20a,complement%20is%20one's%20complement%20%2B%201.
binary arithmetic: https://www.tutorialspoint.com/computer_logical_organization/binary_arithmetic.htm

=== IMPORTANT LINKS ====
brew for macos packages or software: https://brew.sh/
ubuntu: https://ubuntu.com/
manjaro: https://manjaro.org/
docker: https://www.docker.com/
